name: DevOps pipeline
on: [push]

env:
  AWS_REGION: ap-northeast-2                   # set this to your preferred AWS region, e.g. us-west-1
  # ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  ECS_SERVICE: hazem-app                 # set this to your Amazon ECS service name
  ECS_CLUSTER: laykidi_cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: hazem-app-container 


# this event is for all the workflow (all the jobs)
jobs:
  # This is our first job
  Test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3         # uses: an already existing action and run for linux commands
  # checkout clones the code in the environment wehre the job is going to be runs
  # actions/checkout@v3: actions: username of the github user
  #                     checkout: repo name
  #                     v3: tag (after the @ we put a ref, it can be a tag, 
  #                                                     commit or hash or a branch)                      
      - uses: actions/setup-node@v3 # install node in the env (ubuntu-latest in this case)
        with:
          node-version: 14
      - run: npm install     
      - run: npm test
  Package:
      runs-on: ubuntu-latest
      needs:
         - Test
      steps:
      - name: Checkout 
        uses: actions/checkout@v3
      
      - name: Login to   Docker Hub 
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Set up Docker Buildx   # The builder, this is where docker is going to be installed
        uses: docker/setup-buildx-action@v1
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true     # will it push or just build
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/devops-pipeline:${{ github.sha }} # tag of the image

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
    - Package 
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

     
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ secrets.DOCKER_HUB_USERNAME }}/devops-pipeline:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

